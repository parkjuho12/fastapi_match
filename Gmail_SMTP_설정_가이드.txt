===============================================================================
Gmail SMTP 이메일 인증 설정 가이드 - 에러 해결 및 상세 설명
===============================================================================

🚨 프론트엔드에서 이메일 인증 에러가 발생하는 주요 원인과 해결방법

===============================================================================
1. Gmail SMTP 설정 개요
===============================================================================

현재 백엔드는 Gmail SMTP를 사용하여 이메일을 발송합니다.

SMTP 설정 정보:
- 서버: smtp.gmail.com
- 포트: 465 (SSL)
- 보안: SSL/TLS
- 인증: 앱 비밀번호 (App Password) 필수

===============================================================================
2. Gmail 계정 설정 (중요!)
===============================================================================

2-1. 2단계 인증 활성화 (필수)
---------------------------
1. Gmail 계정 → Google 계정 관리
2. 보안 → 2단계 인증 → 사용 설정
3. 휴대폰 번호 인증 완료

2-2. 앱 비밀번호 생성 (중요!)
--------------------------
1. Google 계정 관리 → 보안
2. "Google에 로그인" 섹션 → 앱 비밀번호
3. 앱 선택: "메일"
4. 기기 선택: "기타 (맞춤 이름)"
5. 이름 입력: "매칭앱 백엔드"
6. **16자리 앱 비밀번호 생성됨** (예: abcd efgh ijkl mnop)
7. 이 비밀번호를 복사해서 저장 (다시 볼 수 없음!)

⚠️ 주의: 일반 Gmail 비밀번호가 아닌 앱 비밀번호를 사용해야 함!

===============================================================================
3. 백엔드 환경변수 설정
===============================================================================

3-1. .env 파일 생성 (프로젝트 루트에)
----------------------------------
매칭 앱(fast api)/.env

# Gmail SMTP 설정
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=465
SMTP_USER=your_gmail@gmail.com
SMTP_PASSWORD=your_16_digit_app_password
EMAIL_TEST_MODE=false

예시:
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=465
SMTP_USER=pjhjh2350@gmail.com
SMTP_PASSWORD=abcdefghijklmnop
EMAIL_TEST_MODE=false

3-2. 개발/테스트 모드 설정
-----------------------
개발 중에는 실제 이메일을 보내지 않고 콘솔에만 출력:
EMAIL_TEST_MODE=true

실제 이메일 발송:
EMAIL_TEST_MODE=false

===============================================================================
4. 현재 백엔드 코드 분석
===============================================================================

4-1. 이메일 설정 로드 (app/config/email_config.py)
------------------------------------------------
- 환경변수에서 SMTP 설정을 가져옴
- 기본값으로 개발용 Gmail 계정 설정됨
- test_mode로 개발/운영 모드 전환

4-2. 이메일 발송 로직 (app/services/email_service.py)
--------------------------------------------------
- aiosmtplib을 사용한 비동기 이메일 발송
- SSL 포트 465 사용
- HTML 형식의 이메일 템플릿
- 에러 처리 및 로깅

===============================================================================
5. 프론트엔드 에러 원인 및 해결방법
===============================================================================

5-1. 일반적인 에러 상황들
-----------------------

A) 이메일 발송 실패 (500 에러)
원인: 
- Gmail 앱 비밀번호가 잘못됨
- 2단계 인증이 비활성화됨
- SMTP 서버 연결 실패

해결방법:
1. Gmail 앱 비밀번호 재생성
2. .env 파일의 SMTP_PASSWORD 업데이트
3. 2단계 인증 활성화 확인

B) 인증번호가 발송되지 않음
원인:
- EMAIL_TEST_MODE=true로 설정됨 (콘솔에만 출력)
- Gmail 보안 정책에 의한 차단

해결방법:
1. EMAIL_TEST_MODE=false 설정
2. Gmail "보안 수준이 낮은 앱의 액세스" 비활성화 상태 확인
3. Gmail에서 "의심스러운 활동" 알림 확인

C) 인증번호 만료 에러 (400 에러)
원인:
- 10분 유효시간 초과
- 이미 사용된 인증번호

해결방법:
1. 새로운 인증번호 요청
2. 10분 내에 인증 완료

5-2. 백엔드 로그 확인 방법
-----------------------
서버 실행 시 콘솔에서 다음 로그 확인:

성공 시:
```
📧 실제 메일 발송 시도:
  SMTP 서버: smtp.gmail.com:465
  발송자: pjhjh2350@gmail.com
  받는사람: student@kbu.ac.kr
  인증번호: 123456
  SMTP 서버 연결 중...
  Gmail 로그인 중...
  메일 전송 중...
✅ 인증 이메일 발송 성공: student@kbu.ac.kr
```

실패 시:
```
❌ 이메일 발송 실패: (534, b'5.7.9 Application-specific password required')
   에러 타입: SMTPAuthenticationError
```

===============================================================================
6. 프론트엔드 에러 처리 가이드
===============================================================================

6-1. API 응답 에러 코드 처리
-------------------------
```dart
Future<void> requestEmailVerification(String email) async {
  try {
    final response = await http.post(
      Uri.parse('$baseUrl/auth/request-email-verification'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'email': email}),
    );

    if (response.statusCode == 200) {
      // 성공: 사용자에게 이메일 확인 안내
      final data = jsonDecode(response.body);
      showSuccessMessage(data['message']);
      
    } else if (response.statusCode == 409) {
      // 중복 이메일
      showErrorMessage('이미 가입된 이메일입니다.');
      
    } else if (response.statusCode == 422) {
      // 도메인 검증 실패
      showErrorMessage('경복대학교 이메일(@kbu.ac.kr)만 사용할 수 있습니다.');
      
    } else if (response.statusCode == 500) {
      // 서버 에러 (이메일 발송 실패)
      final errorData = jsonDecode(response.body);
      showErrorMessage('이메일 발송에 실패했습니다. 잠시 후 다시 시도해주세요.');
      
      // 개발자용 로그
      print('Email service error: ${errorData['detail']}');
    }
    
  } catch (e) {
    // 네트워크 에러 등
    showErrorMessage('네트워크 오류가 발생했습니다. 인터넷 연결을 확인해주세요.');
    print('Network error: $e');
  }
}
```

6-2. 사용자 친화적 에러 메시지
---------------------------
```dart
void showErrorMessage(String message) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(
      content: Text(message),
      backgroundColor: Colors.red,
      duration: Duration(seconds: 5),
    ),
  );
}

void showSuccessMessage(String message) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(
      content: Text(message),
      backgroundColor: Colors.green,
      duration: Duration(seconds: 3),
    ),
  );
}
```

===============================================================================
7. 개발/테스트 가이드
===============================================================================

7-1. 개발 중 테스트 방법
---------------------
1. EMAIL_TEST_MODE=true 설정
2. 백엔드 서버 실행
3. 인증번호 요청 API 호출
4. 서버 콘솔에서 인증번호 확인
5. 확인된 인증번호로 인증 진행

콘솔 출력 예시 (test_mode=true):
```
==================================================
📧 실제 메일 발송 시뮬레이션
받는 사람: student@kbu.ac.kr
발송자: pjhjh2350@gmail.com
SMTP 서버: smtp.gmail.com:465
목적: email_verification
🔑 인증번호: 123456
유효시간: 10분

📬 student@kbu.ac.kr로 다음 내용의 메일이 발송됩니다:
제목: 경복대학교 매칭앱 - 인증번호
내용: 이메일 인증을 위한 인증번호는 123456입니다.
==================================================
```

7-2. 실제 이메일 발송 테스트
-------------------------
1. EMAIL_TEST_MODE=false 설정
2. 유효한 Gmail 앱 비밀번호 설정
3. @kbu.ac.kr 이메일로 테스트
4. 실제 이메일 수신함 확인

===============================================================================
8. 보안 및 운영 고려사항
===============================================================================

8-1. 보안 강화 방안
-----------------
1. 환경변수로 민감 정보 관리
2. .env 파일을 .gitignore에 추가
3. 프로덕션에서는 전용 Gmail 계정 사용
4. 정기적으로 앱 비밀번호 갱신

8-2. 모니터링 및 로깅
-------------------
1. 이메일 발송 성공/실패 로그 기록
2. 일일 발송 한도 모니터링
3. 스팸 신고 방지를 위한 발송 빈도 제한

8-3. Gmail 한도 정책
------------------
- 일일 발송 한도: 개인 Gmail 계정 기준 500통/일
- 분당 발송 한도: 약 100통/분
- 대량 발송 시 Google Workspace 사용 권장

===============================================================================
9. 문제 해결 체크리스트
===============================================================================

이메일 인증 에러 발생 시 순서대로 확인:

□ 1. Gmail 2단계 인증 활성화 확인
□ 2. Gmail 앱 비밀번호 생성/확인
□ 3. .env 파일의 SMTP 설정 확인
□ 4. EMAIL_TEST_MODE 설정 확인
□ 5. 백엔드 서버 콘솔 로그 확인
□ 6. 네트워크 연결 상태 확인
□ 7. @kbu.ac.kr 도메인 이메일 사용 확인
□ 8. 인증번호 유효시간(10분) 확인
□ 9. 프론트엔드 API 호출 URL 확인
□ 10. 서버 응답 상태 코드 확인

===============================================================================
10. 긴급 대응 방안
===============================================================================

이메일 발송이 완전히 실패하는 경우:

1. 임시로 EMAIL_TEST_MODE=true 설정
2. 콘솔에서 인증번호 확인 후 수동 입력
3. Gmail 계정 문제 해결 후 다시 운영 모드 전환

또는

1. 다른 Gmail 계정으로 교체
2. Google Workspace 계정 사용
3. 외부 이메일 서비스 (SendGrid, AWS SES 등) 연동

이 가이드를 참고하여 이메일 인증 시스템의 문제를 해결하실 수 있습니다!
